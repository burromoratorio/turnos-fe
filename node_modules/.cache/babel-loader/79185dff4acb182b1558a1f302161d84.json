{"remainingRequest":"/home/igeli/vue/turnos-fe/node_modules/babel-loader/lib/index.js!/home/igeli/vue/turnos-fe/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/igeli/vue/turnos-fe/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/igeli/vue/turnos-fe/src/views/publico/StepOne.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/igeli/vue/turnos-fe/src/views/publico/StepOne.vue","mtime":1542824599636},{"path":"/home/igeli/vue/turnos-fe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/igeli/vue/turnos-fe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/igeli/vue/turnos-fe/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/igeli/vue/turnos-fe/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { validationMixin } from 'vuelidate';\nimport { required, email } from 'vuelidate/lib/validators';\nexport default {\n  props: ['clickedNext', 'currentStep'],\n  mixins: [validationMixin],\n  data: function data() {\n    return {\n      form: {\n        username: '',\n        demoEmail: '',\n        message: ''\n      }\n    };\n  },\n  validations: {\n    form: {\n      username: {\n        required: required\n      },\n      demoEmail: {\n        required: required,\n        email: email\n      },\n      message: {\n        required: required\n      }\n    }\n  },\n  watch: {\n    $v: {\n      handler: function handler(val) {\n        var _this = this;\n\n        if (!val.$invalid) {\n          this.$emit('can-continue', {\n            value: true\n          });\n        } else {\n          this.$emit('can-continue', {\n            value: false\n          });\n          setTimeout(function () {\n            _this.$emit('change-next', {\n              nextBtnValue: false\n            });\n          }, 3000);\n        }\n      },\n      deep: true\n    },\n    clickedNext: function clickedNext(val) {\n      console.log(val);\n\n      if (val === true) {\n        this.$v.form.$touch();\n      }\n    }\n  },\n  mounted: function mounted() {\n    if (!this.$v.$invalid) {\n      this.$emit('can-continue', {\n        value: true\n      });\n    } else {\n      this.$emit('can-continue', {\n        value: false\n      });\n    }\n  }\n};",{"version":3,"sources":["StepOne.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAA,eAAA,QAAA,WAAA;AACA,SAAA,QAAA,EAAA,KAAA,QAAA,0BAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA,CAAA,aAAA,EAAA,aAAA,CADA;AAEA,EAAA,MAAA,EAAA,CAAA,eAAA,CAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,IAAA,EAAA;AACA,QAAA,QAAA,EAAA,EADA;AAEA,QAAA,SAAA,EAAA,EAFA;AAGA,QAAA,OAAA,EAAA;AAHA;AADA,KAAA;AAOA,GAXA;AAYA,EAAA,WAAA,EAAA;AACA,IAAA,IAAA,EAAA;AACA,MAAA,QAAA,EAAA;AACA,QAAA,QAAA,EAAA;AADA,OADA;AAIA,MAAA,SAAA,EAAA;AACA,QAAA,QAAA,EAAA,QADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAJA;AAQA,MAAA,OAAA,EAAA;AACA,QAAA,QAAA,EAAA;AADA;AARA;AADA,GAZA;AA0BA,EAAA,KAAA,EAAA;AACA,IAAA,EAAA,EAAA;AACA,MAAA,OAAA,EAAA,iBAAA,GAAA,EAAA;AAAA;;AACA,YAAA,CAAA,GAAA,CAAA,QAAA,EAAA;AACA,eAAA,KAAA,CAAA,cAAA,EAAA;AAAA,YAAA,KAAA,EAAA;AAAA,WAAA;AACA,SAFA,MAEA;AACA,eAAA,KAAA,CAAA,cAAA,EAAA;AAAA,YAAA,KAAA,EAAA;AAAA,WAAA;AACA,UAAA,UAAA,CAAA,YAAA;AACA,YAAA,KAAA,CAAA,KAAA,CAAA,aAAA,EAAA;AAAA,cAAA,YAAA,EAAA;AAAA,aAAA;AACA,WAFA,EAEA,IAFA,CAAA;AAGA;AACA,OAVA;AAWA,MAAA,IAAA,EAAA;AAXA,KADA;AAeA,IAAA,WAfA,uBAeA,GAfA,EAeA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,GAAA;;AACA,UAAA,GAAA,KAAA,IAAA,EAAA;AACA,aAAA,EAAA,CAAA,IAAA,CAAA,MAAA;AACA;AACA;AApBA,GA1BA;AAgDA,EAAA,OAhDA,qBAgDA;AACA,QAAA,CAAA,KAAA,EAAA,CAAA,QAAA,EAAA;AACA,WAAA,KAAA,CAAA,cAAA,EAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;AACA,KAFA,MAEA;AACA,WAAA,KAAA,CAAA,cAAA,EAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;AACA;AACA;AAtDA,CAAA","sourcesContent":["<template>\n    <div style=\"padding: 2rem 3rem; text-align: left;\">\n        <div class=\"field\">\n            <label class=\"label\">Username</label>\n            <div class=\"control\">\n                <input :class=\"['input', ($v.form.username.$error) ? 'is-danger' : '']\" type=\"text\" placeholder=\"Text input\"\n                       v-model=\"form.username\">\n            </div>\n            <p v-if=\"$v.form.username.$error\" class=\"help is-danger\">This username is invalid</p>\n        </div>\n        <div class=\"field\">\n            <label class=\"label\">Email</label>\n            <div class=\"control\">\n                <input :class=\"['input', ($v.form.demoEmail.$error) ? 'is-danger' : '']\"  type=\"text\" placeholder=\"Email input\" v-model=\"form.demoEmail\">\n            </div>\n            <p v-if=\"$v.form.demoEmail.$error\" class=\"help is-danger\">This email is invalid</p>\n        </div>\n        <div class=\"field\">\n            <label class=\"label\">Message</label>\n            <div class=\"control\">\n                <textarea :class=\"['textarea', ($v.form.message.$error) ? 'is-danger' : '']\"  placeholder=\"Textarea\" v-model=\"form.message\"></textarea>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import {validationMixin} from 'vuelidate'\n    import {required, email} from 'vuelidate/lib/validators'\n\n    export default {\n        props: ['clickedNext', 'currentStep'],\n        mixins: [validationMixin],\n        data() {\n            return {\n                form: {\n                    username: '',\n                    demoEmail: '',\n                    message: ''\n                }\n            }\n        },\n        validations: {\n            form: {\n                username: {\n                    required\n                },\n                demoEmail: {\n                    required,\n                    email\n                },\n                message: {\n                    required\n                }\n            }\n        },\n        watch: {\n            $v: {\n                handler: function (val) {\n                    if(!val.$invalid) {\n                        this.$emit('can-continue', {value: true});\n                    } else {\n                        this.$emit('can-continue', {value: false});\n                        setTimeout(()=> {\n                            this.$emit('change-next', {nextBtnValue: false});\n                        }, 3000)\n                    }\n                },\n                deep: true\n            },\n\n            clickedNext(val) {\n                console.log(val);\n                if(val === true) {\n                    this.$v.form.$touch();\n                }\n            }\n        },\n        mounted() {\n            if(!this.$v.$invalid) {\n                this.$emit('can-continue', {value: true});\n            } else {\n                this.$emit('can-continue', {value: false});\n            }\n        }\n    }\n</script>"],"sourceRoot":"src/views/publico"}]}